//
// Generated file, do not edit! Created by opp_msgtool 6.0 from inet/HiNA/Messages/TimerMsg/TimerMsg.msg.
//

#ifndef __INET_TIMERMSG_M_H
#define __INET_TIMERMSG_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {

class TimerMsg;

}  // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

#include "inet/networklayer/common/L3Address_m.h" // import inet.networklayer.common.L3Address


namespace inet {

/**
 * Class generated from <tt>inet/HiNA/Messages/TimerMsg/TimerMsg.msg:20</tt> by opp_msgtool.
 * <pre>
 * class TimerMsg extends cMessage
 * {
 *     inet::L3Address destAddr;
 *     inet::L3Address srcAddr;
 *     uint32_t FlowId;
 *     int PacketId;
 *     uint32_t Priority;
 * }
 * </pre>
 */
class INET_API TimerMsg : public ::omnetpp::cMessage
{
  protected:
    L3Address destAddr;
    L3Address srcAddr;
    uint32_t FlowId = 0;
    int PacketId = 0;
    uint32_t Priority = 0;

  private:
    void copy(const TimerMsg& other);

  protected:
    bool operator==(const TimerMsg&) = delete;

  public:
    TimerMsg(const char *name=nullptr);
    TimerMsg(const TimerMsg& other);
    virtual ~TimerMsg();
    TimerMsg& operator=(const TimerMsg& other);
    virtual TimerMsg *dup() const override {return new TimerMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const L3Address& getDestAddr() const;
    virtual L3Address& getDestAddrForUpdate() { return const_cast<L3Address&>(const_cast<TimerMsg*>(this)->getDestAddr());}
    virtual void setDestAddr(const L3Address& destAddr);

    virtual const L3Address& getSrcAddr() const;
    virtual L3Address& getSrcAddrForUpdate() { return const_cast<L3Address&>(const_cast<TimerMsg*>(this)->getSrcAddr());}
    virtual void setSrcAddr(const L3Address& srcAddr);

    virtual uint32_t getFlowId() const;
    virtual void setFlowId(uint32_t FlowId);

    virtual int getPacketId() const;
    virtual void setPacketId(int PacketId);

    virtual uint32_t getPriority() const;
    virtual void setPriority(uint32_t Priority);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const TimerMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, TimerMsg& obj) {obj.parsimUnpack(b);}


}  // namespace inet


namespace omnetpp {

template<> inline inet::TimerMsg *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::TimerMsg*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __INET_TIMERMSG_M_H

