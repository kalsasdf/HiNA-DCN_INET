//
// Generated file, do not edit! Created by opp_msgtool 6.0 from inet/HiNA/Messages/HPCC/INTHeader.msg.
//

#ifndef __INET_INET_HINA_MESSAGES_HPCC_INTHEADER_M_H
#define __INET_INET_HINA_MESSAGES_HPCC_INTHEADER_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {

struct hopInf;
class INTHeader;

}  // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk


namespace inet {

/**
 * Struct generated from inet\HiNA\Messages\HPCC\INTHeader.msg:21 by opp_msgtool.
 */
struct INET_API hopInf
{
    hopInf();
    b queueLength = b(-1);
    double txRate = 0;
    uint64_t txBytes = 0;
    ::omnetpp::simtime_t TS = SIMTIME_ZERO;
};

// helpers for local use
void INET_API __doPacking(omnetpp::cCommBuffer *b, const hopInf& a);
void INET_API __doUnpacking(omnetpp::cCommBuffer *b, hopInf& a);

inline void doParsimPacking(omnetpp::cCommBuffer *b, const hopInf& obj) { __doPacking(b, obj); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, hopInf& obj) { __doUnpacking(b, obj); }

/**
 * Class generated from <tt>inet\HiNA\Messages\HPCC\INTHeader.msg:28</tt> by opp_msgtool.
 * <pre>
 * class INTHeader extends FieldsChunk
 * {
 *     chunkLength = B (42);
 *     int nHop;
 *     int pathID;
 *     hopInf hopInfs[5];		//交换机上的信息
 * }
 * </pre>
 */
class INET_API INTHeader : public ::inet::FieldsChunk
{
  protected:
    int nHop = 0;
    int pathID = 0;
    hopInf hopInfs[5];

  private:
    void copy(const INTHeader& other);

  protected:
    bool operator==(const INTHeader&) = delete;

  public:
    INTHeader();
    INTHeader(const INTHeader& other);
    virtual ~INTHeader();
    INTHeader& operator=(const INTHeader& other);
    virtual INTHeader *dup() const override {return new INTHeader(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getNHop() const;
    virtual void setNHop(int nHop);

    virtual int getPathID() const;
    virtual void setPathID(int pathID);

    virtual size_t getHopInfsArraySize() const;
    virtual const hopInf& getHopInfs(size_t k) const;
    virtual hopInf& getHopInfsForUpdate(size_t k) { handleChange();return const_cast<hopInf&>(const_cast<INTHeader*>(this)->getHopInfs(k));}
    virtual void setHopInfs(size_t k, const hopInf& hopInfs);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const INTHeader& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, INTHeader& obj) {obj.parsimUnpack(b);}


}  // namespace inet


namespace omnetpp {

inline any_ptr toAnyPtr(const inet::hopInf *p) {return any_ptr(p);}
template<> inline inet::hopInf *fromAnyPtr(any_ptr ptr) { return ptr.get<inet::hopInf>(); }
template<> inline inet::INTHeader *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::INTHeader*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __INET_INET_HINA_MESSAGES_HPCC_INTHEADER_M_H

