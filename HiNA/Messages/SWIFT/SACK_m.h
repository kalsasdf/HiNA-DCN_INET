//
// Generated file, do not edit! Created by opp_msgtool 6.0 from inet/HiNA/Messages/SWIFT/SACK.msg.
//

#ifndef __INET_INET_HINA_MESSAGES_SWIFT_SACK_M_H
#define __INET_INET_HINA_MESSAGES_SWIFT_SACK_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {

class SackItem;
class SACK;

}  // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk


namespace inet {

/**
 * Class generated from <tt>inet\HiNA\Messages\SWIFT\SACK.msg:22</tt> by opp_msgtool.
 * <pre>
 * class SackItem extends cObject
 * {
 *     \@packetData;
 *     unsigned int packetid;
 * }
 * </pre>
 */
class INET_API SackItem : public ::omnetpp::cObject
{
  protected:
    unsigned int packetid = 0;

  private:
    void copy(const SackItem& other);

  protected:
    bool operator==(const SackItem&) = delete;

  public:
    SackItem();
    SackItem(const SackItem& other);
    virtual ~SackItem();
    SackItem& operator=(const SackItem& other);
    virtual SackItem *dup() const override {return new SackItem(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual unsigned int getPacketid() const;
    virtual void setPacketid(unsigned int packetid);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const SackItem& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, SackItem& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet\HiNA\Messages\SWIFT\SACK.msg:29</tt> by opp_msgtool.
 * <pre>
 * class SACK extends FieldsChunk
 * {
 *     chunkLength = B(2);
 *     SackItem sackItem[];//for SACK over UDP
 * }
 * </pre>
 */
class INET_API SACK : public ::inet::FieldsChunk
{
  protected:
    SackItem *sackItem = nullptr;
    size_t sackItem_arraysize = 0;

  private:
    void copy(const SACK& other);

  protected:
    bool operator==(const SACK&) = delete;

  public:
    SACK();
    SACK(const SACK& other);
    virtual ~SACK();
    SACK& operator=(const SACK& other);
    virtual SACK *dup() const override {return new SACK(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual void setSackItemArraySize(size_t size);
    virtual size_t getSackItemArraySize() const;
    virtual const SackItem& getSackItem(size_t k) const;
    virtual SackItem& getSackItemForUpdate(size_t k) { handleChange();return const_cast<SackItem&>(const_cast<SACK*>(this)->getSackItem(k));}
    virtual void setSackItem(size_t k, const SackItem& sackItem);
    virtual void insertSackItem(size_t k, const SackItem& sackItem);
    [[deprecated]] void insertSackItem(const SackItem& sackItem) {appendSackItem(sackItem);}
    virtual void appendSackItem(const SackItem& sackItem);
    virtual void eraseSackItem(size_t k);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const SACK& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, SACK& obj) {obj.parsimUnpack(b);}


}  // namespace inet


namespace omnetpp {

template<> inline inet::SackItem *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::SackItem*>(ptr.get<cObject>()); }
template<> inline inet::SACK *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::SACK*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __INET_INET_HINA_MESSAGES_SWIFT_SACK_M_H

