//
// Generated file, do not edit! Created by opp_msgtool 6.0 from inet/HiNA/Messages/BfcFrame/EthernetBfcFrame.msg.
//

#ifndef __INET_ETHERNETBFCFRAME_M_H
#define __INET_ETHERNETBFCFRAME_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {

class EthernetBfcFrame;

}  // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

#include "inet/linklayer/ethernet/common/EthernetControlFrame_m.h" // import inet.linklayer.ethernet.common.EthernetControlFrame


namespace inet {

/**
 * Enum generated from <tt>inet/HiNA/Messages/BfcFrame/EthernetBfcFrame.msg:24</tt> by opp_msgtool.
 * <pre>
 * enum EthernetBfcControlOpCode
 * {
 *     ETHERNET_BFC_PAUSE = 3;
 *     ETHERNET_BFC_RESUME = 4;
 * }
 * </pre>
 */
enum EthernetBfcControlOpCode {
    ETHERNET_BFC_PAUSE = 3,
    ETHERNET_BFC_RESUME = 4
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const EthernetBfcControlOpCode& e) { b->pack(static_cast<int>(e)); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, EthernetBfcControlOpCode& e) { int n; b->unpack(n); e = static_cast<EthernetBfcControlOpCode>(n); }

/**
 * Class generated from <tt>inet/HiNA/Messages/BfcFrame/EthernetBfcFrame.msg:30</tt> by opp_msgtool.
 * <pre>
 * class EthernetBfcFrame extends EthernetControlFrameBase
 * {
 *     chunkLength = B(20);
 *     int16_t queueID = -1;
 *     int16_t pauseTime = 100; // in 512 bit-time units
 * }
 * </pre>
 */
class INET_API EthernetBfcFrame : public ::inet::EthernetControlFrameBase
{
  protected:
    int16_t queueID = -1;
    int16_t pauseTime = 100;

  private:
    void copy(const EthernetBfcFrame& other);

  protected:
    bool operator==(const EthernetBfcFrame&) = delete;

  public:
    EthernetBfcFrame();
    EthernetBfcFrame(const EthernetBfcFrame& other);
    virtual ~EthernetBfcFrame();
    EthernetBfcFrame& operator=(const EthernetBfcFrame& other);
    virtual EthernetBfcFrame *dup() const override {return new EthernetBfcFrame(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int16_t getQueueID() const;
    virtual void setQueueID(int16_t queueID);

    virtual int16_t getPauseTime() const;
    virtual void setPauseTime(int16_t pauseTime);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const EthernetBfcFrame& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, EthernetBfcFrame& obj) {obj.parsimUnpack(b);}


}  // namespace inet


namespace omnetpp {

template<> inline inet::EthernetBfcFrame *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::EthernetBfcFrame*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __INET_ETHERNETBFCFRAME_M_H

